// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  wallets       Wallet[]
  expenses      Expense[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //  @@unique([email, token])
}

model ResetPasswordToken {
  id        String   @id @default(cuid())
  email     String
  token     String
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

// Wallet
model Wallet {
  id         String     @id @default(uuid()) @db.VarChar(255)
  userId     String     @db.VarChar(255)
  user       User       @relation(fields: [userId], references: [id])
  name       String     @db.VarChar(255)
  typeId     String     @db.VarChar(255)
  type       WalletType @relation(fields: [typeId], references: [id])
  currencyId String     @db.VarChar(255)
  currency   Currency   @relation(fields: [currencyId], references: [id])
  balance    Int        @default(0) @db.Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([userId])
  @@index([typeId])
  @@index([currencyId])
}

// currency model
model Currency {
  id        String   @id @default(uuid()) @db.VarChar(255)
  name      String   @db.VarChar(255) @unique
  symbol    String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Wallet    Wallet[]

  @@index([name])
}

model WalletType {
  id        String   @id @default(uuid()) @db.VarChar(255)
  name      String   @db.VarChar(255) @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Wallet    Wallet[]
}

model Expense {
  id            String   @id @default(uuid()) @db.VarChar(255)
  userId        String   @db.VarChar(255)
  user          User     @relation(fields: [userId], references: [id])
  category      String   @db.VarChar(255)
  title         String   @db.VarChar(255)
  note          String   @db.VarChar(255)
  paymentMethod String   @db.VarChar(255)
  currency      String   @db.VarChar(255)
  amount        Int      @db.Int
  paidAt        DateTime @db.DateTime

  recurringStartedAt  DateTime @db.DateTime
  recurringFinishedAt DateTime @db.DateTime
  reccuringSequence   String   @db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
